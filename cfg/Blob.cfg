#!/usr/bin/env python
PACKAGE = "lane_follow_blob"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

def enum(name, id, fields, container=None):
    if container is None:
        container = gen

    consts = []
    for i, f in enumerate(fields):
        consts.append(gen.const(f"{id}_{f}", int_t, i, f))

    e = gen.enum(consts, name)
    container.add(id, int_t, 0, name, 0, 0, len(fields), edit_method=e)





#
# Preprocessing
#
preproc = gen.add_group('A_preproc')
preproc.add("med_blur_enable", bool_t,   0, "Enable/Disable Edge Detection", True)
preproc.add("med_blur", int_t,    0, "Enhance Median Blur", 4, 1, 15)

preproc.add("enable_less_color",       bool_t,   0, "Enable color reduction", False)
preproc.add("less_color_mux",          double_t, 0, "Color reduction amount", 1, 0.0, 10.0)

preproc.add("enable_clahe",            bool_t,   0, "Enable CLAHE Dynamic Contrast Adjust", False)
preproc.add("clahe_clip",              int_t,    0, "CLAHE Clip Limit", 2, 1, 4)

preproc.add("enable_color_correct",    bool_t,   0, "Enable Color Adjustment", False)
preproc.add("cc_alpha",                double_t, 0, "Contrast", 1, 0, 10)
preproc.add("cc_beta",                 double_t, 0, "Brightness", 0, -2550, 2550)

preproc.add("enable_sharpen",          bool_t,   0, "Enable Sharpening", False)
preproc.add("sharp_weight",            double_t, 0, "Sharpness", .5, -5, 5)
preproc.add("sharp_kernel",            int_t,    0, "Sharpness Kernel Size", 1, 1, 10)

#
# Edge Detection
#
edge = gen.add_group('B_edge_detect')

edge.add("edge_detect_enable", bool_t,   0, "Enable/Disable Edge Detection", True)

enum('Edge Method', 'edge_method', ['canny', 'laplac'], container=edge)

# Canny
edge.add("canny_lower_thresh",  int_t, 0, "Canny Lower Threshold", 700, 10, 100000)
edge.add("canny_upper_thresh",  int_t, 0, "Canny Upper Thresold", 2000, 10, 100000)
edge.add("canny_aperture_size", int_t, 0, "Canny Aperature Size", 2, 1, 3)

# Laplac
edge.add("lapla_ksize",     int_t,    0, "Laplacian kSize", 1, 0, 3)
edge.add("sobel_xorder",    int_t,    0, "Sobel X Order", 1, 1, 10)
edge.add("sobel_yorder",    int_t,    0, "Sobel Y Order", 1, 1, 10)
edge.add("sobel_ksize",     int_t,    0, "Sobel kSize", 1, 1, 3)


dilate = gen.add_group('C_dilation')
dilate.add("dilation_enable", bool_t,   0, "Enable/Disable Edge Detection", True)
dilate.add("dilation_size",   int_t,    0, "Blob Dilation Size", 5, 1, 10)

#
# Line Detection
#
lines = gen.add_group('D_lines')
lines.add("lines_enable",       bool_t,   0, "Enable Line Detection", True)#
lines.add("lines_thresh",       int_t,    0, "Lines Threshold", 85, 0, 1000)#
lines.add("lines_rho",          int_t,    0, "Lines rho", 2, 1, 10)#
lines.add("lines_min_len",      int_t,    0, "Lines Min Len", 70, 0, 1000)#
lines.add("lines_max_gap",      int_t,    0, "Lines Max Gap", 10, 0, 1000)#
lines.add("lines_top",          double_t, 0, "Lines Top Limit", .53, 0, 1)#
lines.add("lines_max_slope",    double_t, 0, "Lines Max Slope", 1.7, 0, 10)#
lines.add("lines_min_slope",    double_t, 0, "Lines Min Slope", .5, 0, 10)#


#
# Lane Centering Params
#
blob = gen.add_group('Z_blob')
blob.add("blob_y",                double_t, 0, "Blob Origin Y", .95, 0, 1)#
blob.add("blob_x",                double_t, 0, "Blob Origin X", .5, 0, 1)#
blob.add("blob_coeff",            double_t, 0, "Blob Spring Coeff", .1, 0, 1)#
blob.add("blob_len",              double_t, 0, "Blob Spring Normal Length", .2, 0, 1)#
blob.add("blob_num_points",       int_t,    0, "Blob Rays Cast", 50, 10, 300)#
blob.add("blob_median_blur_size", int_t,    0, "Blob Median Blur Size", 13, 0, 100)#
blob.add("blob_dilation_size",    int_t,    0, "Blob Dilation Size", 5, 1, 10)#
blob.add("blob_mult",             double_t, 0, "Blob Output Mult", 3, 0, 15)#
blob.add("blob_max_p_y",          double_t, 0, "Blob Max Point (y)", 0.7, 0, 1)



#gen.add("show_edge_detect",              bool_t,   0, "Show Canny Edges", False)
#gen.add("show_result",                   bool_t,   0, "Show Processed Image", False)
#gen.add("show_blob",                     bool_t,   0, "Show Blob Points/Edges", False)
#gen.add("show_lines",                    bool_t,   0, "Show Hough Lines", False)

exit(gen.generate(PACKAGE, "lane_follow_blob", "Blob"))
